// Generated from /home/su/IdeaProjects/langA/langosWithoutSyntax.g4 by ANTLR 4.10.1
package org.lexasub.langosSecondTry;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class langosWithoutSyntaxLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.10.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, CHAR=2, STRING=3, IMPORT=4, SYNTAX=5, RETURN=6, WITH=7, MAP=8, 
		PAIRMAP=9, IF=10, WHILE=11, CONTINUE=12, BREAK=13, CLASS=14, KWD=15, QUEST=16, 
		STAR=17, PLUS=18, MINUS=19, ASSIGN=20, DOT=21, LPAREN=22, RPAREN=23, LBRACE=24, 
		RBRACE=25, LEND=26, REND=27, BAR=28, GT=29, LT=30, CIRCUMFLEX=31, DOUBLECOLON=32, 
		COLON=33, SEMI=34, COMA=35, ARROW=36, ID=37;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	private static String[] makeRuleNames() {
		return new String[] {
			"T__0", "ANY", "CHAR", "STRING", "IMPORT", "SYNTAX", "RETURN", "WITH", 
			"MAP", "PAIRMAP", "IF", "WHILE", "CONTINUE", "BREAK", "CLASS", "KWD", 
			"QUEST", "STAR", "PLUS", "MINUS", "ASSIGN", "DOT", "LPAREN", "RPAREN", 
			"LBRACE", "RBRACE", "LEND", "REND", "BAR", "GT", "LT", "CIRCUMFLEX", 
			"DOUBLECOLON", "COLON", "SEMI", "COMA", "ARROW", "ID"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'$'", null, null, "'import'", "'syntax'", "'return'", "'with'", 
			"'map'", "'pairmap'", "'if'", "'while'", "'continue'", "'break'", "'class'", 
			null, "'?'", "'*'", "'+'", "'-'", "'='", "'.'", "')'", "'('", "'}'", 
			"'{'", "']'", "'['", "'|'", "'>'", "'<'", "'^'", "'::'", "':'", "';'", 
			"','", "'->'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, null, "CHAR", "STRING", "IMPORT", "SYNTAX", "RETURN", "WITH", "MAP", 
			"PAIRMAP", "IF", "WHILE", "CONTINUE", "BREAK", "CLASS", "KWD", "QUEST", 
			"STAR", "PLUS", "MINUS", "ASSIGN", "DOT", "LPAREN", "RPAREN", "LBRACE", 
			"RBRACE", "LEND", "REND", "BAR", "GT", "LT", "CIRCUMFLEX", "DOUBLECOLON", 
			"COLON", "SEMI", "COMA", "ARROW", "ID"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public langosWithoutSyntaxLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "langosWithoutSyntax.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\u0004\u0000%\u00db\u0006\uffff\uffff\u0002\u0000\u0007\u0000\u0002\u0001"+
		"\u0007\u0001\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004"+
		"\u0007\u0004\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007"+
		"\u0007\u0007\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b"+
		"\u0007\u000b\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002"+
		"\u000f\u0007\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002"+
		"\u0012\u0007\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002"+
		"\u0015\u0007\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002"+
		"\u0018\u0007\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002"+
		"\u001b\u0007\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002"+
		"\u001e\u0007\u001e\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007"+
		"!\u0002\"\u0007\"\u0002#\u0007#\u0002$\u0007$\u0002%\u0007%\u0001\u0000"+
		"\u0001\u0000\u0001\u0001\u0001\u0001\u0001\u0002\u0001\u0002\u0001\u0002"+
		"\u0001\u0002\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0005\u0003"+
		"Z\b\u0003\n\u0003\f\u0003]\t\u0003\u0001\u0003\u0001\u0003\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005"+
		"\u0001\u0005\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006"+
		"\u0001\u0006\u0001\u0006\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007"+
		"\u0001\u0007\u0001\b\u0001\b\u0001\b\u0001\b\u0001\t\u0001\t\u0001\t\u0001"+
		"\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\n\u0001\n\u0001\n\u0001\u000b"+
		"\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\f\u0001"+
		"\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\r\u0001"+
		"\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\u000e\u0001\u000e\u0001\u000e"+
		"\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000f\u0001\u000f\u0003\u000f"+
		"\u00a7\b\u000f\u0001\u0010\u0001\u0010\u0001\u0011\u0001\u0011\u0001\u0012"+
		"\u0001\u0012\u0001\u0013\u0001\u0013\u0001\u0014\u0001\u0014\u0001\u0015"+
		"\u0001\u0015\u0001\u0016\u0001\u0016\u0001\u0017\u0001\u0017\u0001\u0018"+
		"\u0001\u0018\u0001\u0019\u0001\u0019\u0001\u001a\u0001\u001a\u0001\u001b"+
		"\u0001\u001b\u0001\u001c\u0001\u001c\u0001\u001d\u0001\u001d\u0001\u001e"+
		"\u0001\u001e\u0001\u001f\u0001\u001f\u0001 \u0001 \u0001 \u0001!\u0001"+
		"!\u0001\"\u0001\"\u0001#\u0001#\u0001$\u0001$\u0001$\u0001%\u0001%\u0005"+
		"%\u00d7\b%\n%\f%\u00da\t%\u0001[\u0000&\u0001\u0001\u0003\u0000\u0005"+
		"\u0002\u0007\u0003\t\u0004\u000b\u0005\r\u0006\u000f\u0007\u0011\b\u0013"+
		"\t\u0015\n\u0017\u000b\u0019\f\u001b\r\u001d\u000e\u001f\u000f!\u0010"+
		"#\u0011%\u0012\'\u0013)\u0014+\u0015-\u0016/\u00171\u00183\u00195\u001a"+
		"7\u001b9\u001c;\u001d=\u001e?\u001fA C!E\"G#I$K%\u0001\u0000\u0002\u0002"+
		"\u0000AZaz\u0004\u000009AZ__az\u00dd\u0000\u0001\u0001\u0000\u0000\u0000"+
		"\u0000\u0005\u0001\u0000\u0000\u0000\u0000\u0007\u0001\u0000\u0000\u0000"+
		"\u0000\t\u0001\u0000\u0000\u0000\u0000\u000b\u0001\u0000\u0000\u0000\u0000"+
		"\r\u0001\u0000\u0000\u0000\u0000\u000f\u0001\u0000\u0000\u0000\u0000\u0011"+
		"\u0001\u0000\u0000\u0000\u0000\u0013\u0001\u0000\u0000\u0000\u0000\u0015"+
		"\u0001\u0000\u0000\u0000\u0000\u0017\u0001\u0000\u0000\u0000\u0000\u0019"+
		"\u0001\u0000\u0000\u0000\u0000\u001b\u0001\u0000\u0000\u0000\u0000\u001d"+
		"\u0001\u0000\u0000\u0000\u0000\u001f\u0001\u0000\u0000\u0000\u0000!\u0001"+
		"\u0000\u0000\u0000\u0000#\u0001\u0000\u0000\u0000\u0000%\u0001\u0000\u0000"+
		"\u0000\u0000\'\u0001\u0000\u0000\u0000\u0000)\u0001\u0000\u0000\u0000"+
		"\u0000+\u0001\u0000\u0000\u0000\u0000-\u0001\u0000\u0000\u0000\u0000/"+
		"\u0001\u0000\u0000\u0000\u00001\u0001\u0000\u0000\u0000\u00003\u0001\u0000"+
		"\u0000\u0000\u00005\u0001\u0000\u0000\u0000\u00007\u0001\u0000\u0000\u0000"+
		"\u00009\u0001\u0000\u0000\u0000\u0000;\u0001\u0000\u0000\u0000\u0000="+
		"\u0001\u0000\u0000\u0000\u0000?\u0001\u0000\u0000\u0000\u0000A\u0001\u0000"+
		"\u0000\u0000\u0000C\u0001\u0000\u0000\u0000\u0000E\u0001\u0000\u0000\u0000"+
		"\u0000G\u0001\u0000\u0000\u0000\u0000I\u0001\u0000\u0000\u0000\u0000K"+
		"\u0001\u0000\u0000\u0000\u0001M\u0001\u0000\u0000\u0000\u0003O\u0001\u0000"+
		"\u0000\u0000\u0005Q\u0001\u0000\u0000\u0000\u0007U\u0001\u0000\u0000\u0000"+
		"\t`\u0001\u0000\u0000\u0000\u000bg\u0001\u0000\u0000\u0000\rn\u0001\u0000"+
		"\u0000\u0000\u000fu\u0001\u0000\u0000\u0000\u0011z\u0001\u0000\u0000\u0000"+
		"\u0013~\u0001\u0000\u0000\u0000\u0015\u0086\u0001\u0000\u0000\u0000\u0017"+
		"\u0089\u0001\u0000\u0000\u0000\u0019\u008f\u0001\u0000\u0000\u0000\u001b"+
		"\u0098\u0001\u0000\u0000\u0000\u001d\u009e\u0001\u0000\u0000\u0000\u001f"+
		"\u00a6\u0001\u0000\u0000\u0000!\u00a8\u0001\u0000\u0000\u0000#\u00aa\u0001"+
		"\u0000\u0000\u0000%\u00ac\u0001\u0000\u0000\u0000\'\u00ae\u0001\u0000"+
		"\u0000\u0000)\u00b0\u0001\u0000\u0000\u0000+\u00b2\u0001\u0000\u0000\u0000"+
		"-\u00b4\u0001\u0000\u0000\u0000/\u00b6\u0001\u0000\u0000\u00001\u00b8"+
		"\u0001\u0000\u0000\u00003\u00ba\u0001\u0000\u0000\u00005\u00bc\u0001\u0000"+
		"\u0000\u00007\u00be\u0001\u0000\u0000\u00009\u00c0\u0001\u0000\u0000\u0000"+
		";\u00c2\u0001\u0000\u0000\u0000=\u00c4\u0001\u0000\u0000\u0000?\u00c6"+
		"\u0001\u0000\u0000\u0000A\u00c8\u0001\u0000\u0000\u0000C\u00cb\u0001\u0000"+
		"\u0000\u0000E\u00cd\u0001\u0000\u0000\u0000G\u00cf\u0001\u0000\u0000\u0000"+
		"I\u00d1\u0001\u0000\u0000\u0000K\u00d4\u0001\u0000\u0000\u0000MN\u0005"+
		"$\u0000\u0000N\u0002\u0001\u0000\u0000\u0000OP\t\u0000\u0000\u0000P\u0004"+
		"\u0001\u0000\u0000\u0000QR\u0005\'\u0000\u0000RS\u0003\u0003\u0001\u0000"+
		"ST\u0005\'\u0000\u0000T\u0006\u0001\u0000\u0000\u0000U[\u0005\'\u0000"+
		"\u0000VZ\u0003\u0003\u0001\u0000WX\u0005\\\u0000\u0000XZ\u0005\'\u0000"+
		"\u0000YV\u0001\u0000\u0000\u0000YW\u0001\u0000\u0000\u0000Z]\u0001\u0000"+
		"\u0000\u0000[\\\u0001\u0000\u0000\u0000[Y\u0001\u0000\u0000\u0000\\^\u0001"+
		"\u0000\u0000\u0000][\u0001\u0000\u0000\u0000^_\u0005\'\u0000\u0000_\b"+
		"\u0001\u0000\u0000\u0000`a\u0005i\u0000\u0000ab\u0005m\u0000\u0000bc\u0005"+
		"p\u0000\u0000cd\u0005o\u0000\u0000de\u0005r\u0000\u0000ef\u0005t\u0000"+
		"\u0000f\n\u0001\u0000\u0000\u0000gh\u0005s\u0000\u0000hi\u0005y\u0000"+
		"\u0000ij\u0005n\u0000\u0000jk\u0005t\u0000\u0000kl\u0005a\u0000\u0000"+
		"lm\u0005x\u0000\u0000m\f\u0001\u0000\u0000\u0000no\u0005r\u0000\u0000"+
		"op\u0005e\u0000\u0000pq\u0005t\u0000\u0000qr\u0005u\u0000\u0000rs\u0005"+
		"r\u0000\u0000st\u0005n\u0000\u0000t\u000e\u0001\u0000\u0000\u0000uv\u0005"+
		"w\u0000\u0000vw\u0005i\u0000\u0000wx\u0005t\u0000\u0000xy\u0005h\u0000"+
		"\u0000y\u0010\u0001\u0000\u0000\u0000z{\u0005m\u0000\u0000{|\u0005a\u0000"+
		"\u0000|}\u0005p\u0000\u0000}\u0012\u0001\u0000\u0000\u0000~\u007f\u0005"+
		"p\u0000\u0000\u007f\u0080\u0005a\u0000\u0000\u0080\u0081\u0005i\u0000"+
		"\u0000\u0081\u0082\u0005r\u0000\u0000\u0082\u0083\u0005m\u0000\u0000\u0083"+
		"\u0084\u0005a\u0000\u0000\u0084\u0085\u0005p\u0000\u0000\u0085\u0014\u0001"+
		"\u0000\u0000\u0000\u0086\u0087\u0005i\u0000\u0000\u0087\u0088\u0005f\u0000"+
		"\u0000\u0088\u0016\u0001\u0000\u0000\u0000\u0089\u008a\u0005w\u0000\u0000"+
		"\u008a\u008b\u0005h\u0000\u0000\u008b\u008c\u0005i\u0000\u0000\u008c\u008d"+
		"\u0005l\u0000\u0000\u008d\u008e\u0005e\u0000\u0000\u008e\u0018\u0001\u0000"+
		"\u0000\u0000\u008f\u0090\u0005c\u0000\u0000\u0090\u0091\u0005o\u0000\u0000"+
		"\u0091\u0092\u0005n\u0000\u0000\u0092\u0093\u0005t\u0000\u0000\u0093\u0094"+
		"\u0005i\u0000\u0000\u0094\u0095\u0005n\u0000\u0000\u0095\u0096\u0005u"+
		"\u0000\u0000\u0096\u0097\u0005e\u0000\u0000\u0097\u001a\u0001\u0000\u0000"+
		"\u0000\u0098\u0099\u0005b\u0000\u0000\u0099\u009a\u0005r\u0000\u0000\u009a"+
		"\u009b\u0005e\u0000\u0000\u009b\u009c\u0005a\u0000\u0000\u009c\u009d\u0005"+
		"k\u0000\u0000\u009d\u001c\u0001\u0000\u0000\u0000\u009e\u009f\u0005c\u0000"+
		"\u0000\u009f\u00a0\u0005l\u0000\u0000\u00a0\u00a1\u0005a\u0000\u0000\u00a1"+
		"\u00a2\u0005s\u0000\u0000\u00a2\u00a3\u0005s\u0000\u0000\u00a3\u001e\u0001"+
		"\u0000\u0000\u0000\u00a4\u00a7\u0003\t\u0004\u0000\u00a5\u00a7\u0003\u000b"+
		"\u0005\u0000\u00a6\u00a4\u0001\u0000\u0000\u0000\u00a6\u00a5\u0001\u0000"+
		"\u0000\u0000\u00a7 \u0001\u0000\u0000\u0000\u00a8\u00a9\u0005?\u0000\u0000"+
		"\u00a9\"\u0001\u0000\u0000\u0000\u00aa\u00ab\u0005*\u0000\u0000\u00ab"+
		"$\u0001\u0000\u0000\u0000\u00ac\u00ad\u0005+\u0000\u0000\u00ad&\u0001"+
		"\u0000\u0000\u0000\u00ae\u00af\u0005-\u0000\u0000\u00af(\u0001\u0000\u0000"+
		"\u0000\u00b0\u00b1\u0005=\u0000\u0000\u00b1*\u0001\u0000\u0000\u0000\u00b2"+
		"\u00b3\u0005.\u0000\u0000\u00b3,\u0001\u0000\u0000\u0000\u00b4\u00b5\u0005"+
		")\u0000\u0000\u00b5.\u0001\u0000\u0000\u0000\u00b6\u00b7\u0005(\u0000"+
		"\u0000\u00b70\u0001\u0000\u0000\u0000\u00b8\u00b9\u0005}\u0000\u0000\u00b9"+
		"2\u0001\u0000\u0000\u0000\u00ba\u00bb\u0005{\u0000\u0000\u00bb4\u0001"+
		"\u0000\u0000\u0000\u00bc\u00bd\u0005]\u0000\u0000\u00bd6\u0001\u0000\u0000"+
		"\u0000\u00be\u00bf\u0005[\u0000\u0000\u00bf8\u0001\u0000\u0000\u0000\u00c0"+
		"\u00c1\u0005|\u0000\u0000\u00c1:\u0001\u0000\u0000\u0000\u00c2\u00c3\u0005"+
		">\u0000\u0000\u00c3<\u0001\u0000\u0000\u0000\u00c4\u00c5\u0005<\u0000"+
		"\u0000\u00c5>\u0001\u0000\u0000\u0000\u00c6\u00c7\u0005^\u0000\u0000\u00c7"+
		"@\u0001\u0000\u0000\u0000\u00c8\u00c9\u0005:\u0000\u0000\u00c9\u00ca\u0005"+
		":\u0000\u0000\u00caB\u0001\u0000\u0000\u0000\u00cb\u00cc\u0005:\u0000"+
		"\u0000\u00ccD\u0001\u0000\u0000\u0000\u00cd\u00ce\u0005;\u0000\u0000\u00ce"+
		"F\u0001\u0000\u0000\u0000\u00cf\u00d0\u0005,\u0000\u0000\u00d0H\u0001"+
		"\u0000\u0000\u0000\u00d1\u00d2\u0005-\u0000\u0000\u00d2\u00d3\u0005>\u0000"+
		"\u0000\u00d3J\u0001\u0000\u0000\u0000\u00d4\u00d8\u0007\u0000\u0000\u0000"+
		"\u00d5\u00d7\u0007\u0001\u0000\u0000\u00d6\u00d5\u0001\u0000\u0000\u0000"+
		"\u00d7\u00da\u0001\u0000\u0000\u0000\u00d8\u00d6\u0001\u0000\u0000\u0000"+
		"\u00d8\u00d9\u0001\u0000\u0000\u0000\u00d9L\u0001\u0000\u0000\u0000\u00da"+
		"\u00d8\u0001\u0000\u0000\u0000\u0005\u0000Y[\u00a6\u00d8\u0000";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}