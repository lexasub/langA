// Generated from /home/support-pc/Рабочий стол/техподдержка/отчеты/Копытцев А А/others/inteljidea/langA_/langosWithoutSyntax.g4 by ANTLR 4.10.1
package org.lexasub.langosSecondTry;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class langosWithoutSyntaxLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.10.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, CHAR=2, STRING=3, WS=4, BREAK=5, CLASS=6, CONTINUE=7, IF=8, IMPORT=9, 
		MAP=10, PAIRMAP=11, RETURN=12, SYNTAX=13, WHILE=14, WITH=15, KWD=16, QUEST=17, 
		STAR=18, PLUS=19, MINUS=20, ASSIGN=21, DOT=22, LPAREN=23, RPAREN=24, LBRACE=25, 
		RBRACE=26, LEND=27, REND=28, BAR=29, GT=30, LT=31, CIRCUMFLEX=32, DOUBLECOLON=33, 
		COLON=34, SEMI=35, COMA=36, ARROW=37, ID=38;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	private static String[] makeRuleNames() {
		return new String[] {
			"T__0", "ANY", "ESCQUO", "STRINGBODY", "QUOTE", "CHAR", "STRING", "WS", 
			"BREAK", "CLASS", "CONTINUE", "IF", "IMPORT", "MAP", "PAIRMAP", "RETURN", 
			"SYNTAX", "WHILE", "WITH", "KWD", "QUEST", "STAR", "PLUS", "MINUS", "ASSIGN", 
			"DOT", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LEND", "REND", "BAR", 
			"GT", "LT", "CIRCUMFLEX", "DOUBLECOLON", "COLON", "SEMI", "COMA", "ARROW", 
			"LOWBAR", "ID"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'$'", null, null, null, "'break'", "'class'", "'continue'", "'if'", 
			"'import'", "'map'", "'pairmap'", "'return'", "'syntax'", "'while'", 
			"'with'", null, "'?'", "'*'", "'+'", "'-'", "'='", "'.'", "')'", "'('", 
			"'}'", "'{'", "']'", "'['", "'|'", "'>'", "'<'", "'^'", "'::'", "':'", 
			"';'", "','", "'->'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, null, "CHAR", "STRING", "WS", "BREAK", "CLASS", "CONTINUE", "IF", 
			"IMPORT", "MAP", "PAIRMAP", "RETURN", "SYNTAX", "WHILE", "WITH", "KWD", 
			"QUEST", "STAR", "PLUS", "MINUS", "ASSIGN", "DOT", "LPAREN", "RPAREN", 
			"LBRACE", "RBRACE", "LEND", "REND", "BAR", "GT", "LT", "CIRCUMFLEX", 
			"DOUBLECOLON", "COLON", "SEMI", "COMA", "ARROW", "ID"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public langosWithoutSyntaxLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "langosWithoutSyntax.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	@Override
	public void action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 12:
			IMPORT_action((RuleContext)_localctx, actionIndex);
			break;
		case 42:
			ID_action((RuleContext)_localctx, actionIndex);
			break;
		}
	}
	private void IMPORT_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0:
			System.out.println("import "+getText());
			break;
		}
	}
	private void ID_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 1:
			System.out.println("ID "+getText());
			break;
		}
	}

	public static final String _serializedATN =
		"\u0004\u0000&\u00f7\u0006\uffff\uffff\u0002\u0000\u0007\u0000\u0002\u0001"+
		"\u0007\u0001\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004"+
		"\u0007\u0004\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007"+
		"\u0007\u0007\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b"+
		"\u0007\u000b\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002"+
		"\u000f\u0007\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002"+
		"\u0012\u0007\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002"+
		"\u0015\u0007\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002"+
		"\u0018\u0007\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002"+
		"\u001b\u0007\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002"+
		"\u001e\u0007\u001e\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007"+
		"!\u0002\"\u0007\"\u0002#\u0007#\u0002$\u0007$\u0002%\u0007%\u0002&\u0007"+
		"&\u0002\'\u0007\'\u0002(\u0007(\u0002)\u0007)\u0002*\u0007*\u0001\u0000"+
		"\u0001\u0000\u0001\u0001\u0001\u0001\u0001\u0002\u0001\u0002\u0001\u0002"+
		"\u0001\u0003\u0001\u0003\u0003\u0003a\b\u0003\u0001\u0004\u0001\u0004"+
		"\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0006\u0001\u0006"+
		"\u0005\u0006k\b\u0006\n\u0006\f\u0006n\t\u0006\u0001\u0006\u0001\u0006"+
		"\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\b\u0001\b\u0001"+
		"\b\u0001\b\u0001\b\u0001\b\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001"+
		"\t\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001"+
		"\n\u0001\u000b\u0001\u000b\u0001\u000b\u0001\f\u0001\f\u0001\f\u0001\f"+
		"\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\r\u0001\r\u0001\r\u0001"+
		"\r\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000e"+
		"\u0001\u000e\u0001\u000e\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f"+
		"\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u0010\u0001\u0010\u0001\u0010"+
		"\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0011\u0001\u0011"+
		"\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0012\u0001\u0012"+
		"\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0013\u0001\u0013\u0003\u0013"+
		"\u00be\b\u0013\u0001\u0014\u0001\u0014\u0001\u0015\u0001\u0015\u0001\u0016"+
		"\u0001\u0016\u0001\u0017\u0001\u0017\u0001\u0018\u0001\u0018\u0001\u0019"+
		"\u0001\u0019\u0001\u001a\u0001\u001a\u0001\u001b\u0001\u001b\u0001\u001c"+
		"\u0001\u001c\u0001\u001d\u0001\u001d\u0001\u001e\u0001\u001e\u0001\u001f"+
		"\u0001\u001f\u0001 \u0001 \u0001!\u0001!\u0001\"\u0001\"\u0001#\u0001"+
		"#\u0001$\u0001$\u0001$\u0001%\u0001%\u0001&\u0001&\u0001\'\u0001\'\u0001"+
		"(\u0001(\u0001(\u0001)\u0001)\u0001*\u0001*\u0001*\u0005*\u00f1\b*\n*"+
		"\f*\u00f4\t*\u0001*\u0001*\u0001l\u0000+\u0001\u0001\u0003\u0000\u0005"+
		"\u0000\u0007\u0000\t\u0000\u000b\u0002\r\u0003\u000f\u0004\u0011\u0005"+
		"\u0013\u0006\u0015\u0007\u0017\b\u0019\t\u001b\n\u001d\u000b\u001f\f!"+
		"\r#\u000e%\u000f\'\u0010)\u0011+\u0012-\u0013/\u00141\u00153\u00165\u0017"+
		"7\u00189\u0019;\u001a=\u001b?\u001cA\u001dC\u001eE\u001fG I!K\"M#O$Q%"+
		"S\u0000U&\u0001\u0000\u0003\u0003\u0000\t\n\r\r  \u0002\u0000AZaz\u0003"+
		"\u000009AZaz\u00f6\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u000b\u0001"+
		"\u0000\u0000\u0000\u0000\r\u0001\u0000\u0000\u0000\u0000\u000f\u0001\u0000"+
		"\u0000\u0000\u0000\u0011\u0001\u0000\u0000\u0000\u0000\u0013\u0001\u0000"+
		"\u0000\u0000\u0000\u0015\u0001\u0000\u0000\u0000\u0000\u0017\u0001\u0000"+
		"\u0000\u0000\u0000\u0019\u0001\u0000\u0000\u0000\u0000\u001b\u0001\u0000"+
		"\u0000\u0000\u0000\u001d\u0001\u0000\u0000\u0000\u0000\u001f\u0001\u0000"+
		"\u0000\u0000\u0000!\u0001\u0000\u0000\u0000\u0000#\u0001\u0000\u0000\u0000"+
		"\u0000%\u0001\u0000\u0000\u0000\u0000\'\u0001\u0000\u0000\u0000\u0000"+
		")\u0001\u0000\u0000\u0000\u0000+\u0001\u0000\u0000\u0000\u0000-\u0001"+
		"\u0000\u0000\u0000\u0000/\u0001\u0000\u0000\u0000\u00001\u0001\u0000\u0000"+
		"\u0000\u00003\u0001\u0000\u0000\u0000\u00005\u0001\u0000\u0000\u0000\u0000"+
		"7\u0001\u0000\u0000\u0000\u00009\u0001\u0000\u0000\u0000\u0000;\u0001"+
		"\u0000\u0000\u0000\u0000=\u0001\u0000\u0000\u0000\u0000?\u0001\u0000\u0000"+
		"\u0000\u0000A\u0001\u0000\u0000\u0000\u0000C\u0001\u0000\u0000\u0000\u0000"+
		"E\u0001\u0000\u0000\u0000\u0000G\u0001\u0000\u0000\u0000\u0000I\u0001"+
		"\u0000\u0000\u0000\u0000K\u0001\u0000\u0000\u0000\u0000M\u0001\u0000\u0000"+
		"\u0000\u0000O\u0001\u0000\u0000\u0000\u0000Q\u0001\u0000\u0000\u0000\u0000"+
		"U\u0001\u0000\u0000\u0000\u0001W\u0001\u0000\u0000\u0000\u0003Y\u0001"+
		"\u0000\u0000\u0000\u0005[\u0001\u0000\u0000\u0000\u0007`\u0001\u0000\u0000"+
		"\u0000\tb\u0001\u0000\u0000\u0000\u000bd\u0001\u0000\u0000\u0000\rh\u0001"+
		"\u0000\u0000\u0000\u000fq\u0001\u0000\u0000\u0000\u0011u\u0001\u0000\u0000"+
		"\u0000\u0013{\u0001\u0000\u0000\u0000\u0015\u0081\u0001\u0000\u0000\u0000"+
		"\u0017\u008a\u0001\u0000\u0000\u0000\u0019\u008d\u0001\u0000\u0000\u0000"+
		"\u001b\u0096\u0001\u0000\u0000\u0000\u001d\u009a\u0001\u0000\u0000\u0000"+
		"\u001f\u00a2\u0001\u0000\u0000\u0000!\u00a9\u0001\u0000\u0000\u0000#\u00b0"+
		"\u0001\u0000\u0000\u0000%\u00b6\u0001\u0000\u0000\u0000\'\u00bd\u0001"+
		"\u0000\u0000\u0000)\u00bf\u0001\u0000\u0000\u0000+\u00c1\u0001\u0000\u0000"+
		"\u0000-\u00c3\u0001\u0000\u0000\u0000/\u00c5\u0001\u0000\u0000\u00001"+
		"\u00c7\u0001\u0000\u0000\u00003\u00c9\u0001\u0000\u0000\u00005\u00cb\u0001"+
		"\u0000\u0000\u00007\u00cd\u0001\u0000\u0000\u00009\u00cf\u0001\u0000\u0000"+
		"\u0000;\u00d1\u0001\u0000\u0000\u0000=\u00d3\u0001\u0000\u0000\u0000?"+
		"\u00d5\u0001\u0000\u0000\u0000A\u00d7\u0001\u0000\u0000\u0000C\u00d9\u0001"+
		"\u0000\u0000\u0000E\u00db\u0001\u0000\u0000\u0000G\u00dd\u0001\u0000\u0000"+
		"\u0000I\u00df\u0001\u0000\u0000\u0000K\u00e2\u0001\u0000\u0000\u0000M"+
		"\u00e4\u0001\u0000\u0000\u0000O\u00e6\u0001\u0000\u0000\u0000Q\u00e8\u0001"+
		"\u0000\u0000\u0000S\u00eb\u0001\u0000\u0000\u0000U\u00ed\u0001\u0000\u0000"+
		"\u0000WX\u0005$\u0000\u0000X\u0002\u0001\u0000\u0000\u0000YZ\t\u0000\u0000"+
		"\u0000Z\u0004\u0001\u0000\u0000\u0000[\\\u0005\\\u0000\u0000\\]\u0005"+
		"\'\u0000\u0000]\u0006\u0001\u0000\u0000\u0000^a\u0003\u0003\u0001\u0000"+
		"_a\u0003\u0005\u0002\u0000`^\u0001\u0000\u0000\u0000`_\u0001\u0000\u0000"+
		"\u0000a\b\u0001\u0000\u0000\u0000bc\u0005\'\u0000\u0000c\n\u0001\u0000"+
		"\u0000\u0000de\u0003\t\u0004\u0000ef\u0003\u0003\u0001\u0000fg\u0003\t"+
		"\u0004\u0000g\f\u0001\u0000\u0000\u0000hl\u0003\t\u0004\u0000ik\u0003"+
		"\u0007\u0003\u0000ji\u0001\u0000\u0000\u0000kn\u0001\u0000\u0000\u0000"+
		"lm\u0001\u0000\u0000\u0000lj\u0001\u0000\u0000\u0000mo\u0001\u0000\u0000"+
		"\u0000nl\u0001\u0000\u0000\u0000op\u0003\t\u0004\u0000p\u000e\u0001\u0000"+
		"\u0000\u0000qr\u0007\u0000\u0000\u0000rs\u0001\u0000\u0000\u0000st\u0006"+
		"\u0007\u0000\u0000t\u0010\u0001\u0000\u0000\u0000uv\u0005b\u0000\u0000"+
		"vw\u0005r\u0000\u0000wx\u0005e\u0000\u0000xy\u0005a\u0000\u0000yz\u0005"+
		"k\u0000\u0000z\u0012\u0001\u0000\u0000\u0000{|\u0005c\u0000\u0000|}\u0005"+
		"l\u0000\u0000}~\u0005a\u0000\u0000~\u007f\u0005s\u0000\u0000\u007f\u0080"+
		"\u0005s\u0000\u0000\u0080\u0014\u0001\u0000\u0000\u0000\u0081\u0082\u0005"+
		"c\u0000\u0000\u0082\u0083\u0005o\u0000\u0000\u0083\u0084\u0005n\u0000"+
		"\u0000\u0084\u0085\u0005t\u0000\u0000\u0085\u0086\u0005i\u0000\u0000\u0086"+
		"\u0087\u0005n\u0000\u0000\u0087\u0088\u0005u\u0000\u0000\u0088\u0089\u0005"+
		"e\u0000\u0000\u0089\u0016\u0001\u0000\u0000\u0000\u008a\u008b\u0005i\u0000"+
		"\u0000\u008b\u008c\u0005f\u0000\u0000\u008c\u0018\u0001\u0000\u0000\u0000"+
		"\u008d\u008e\u0005i\u0000\u0000\u008e\u008f\u0005m\u0000\u0000\u008f\u0090"+
		"\u0005p\u0000\u0000\u0090\u0091\u0005o\u0000\u0000\u0091\u0092\u0005r"+
		"\u0000\u0000\u0092\u0093\u0005t\u0000\u0000\u0093\u0094\u0001\u0000\u0000"+
		"\u0000\u0094\u0095\u0006\f\u0001\u0000\u0095\u001a\u0001\u0000\u0000\u0000"+
		"\u0096\u0097\u0005m\u0000\u0000\u0097\u0098\u0005a\u0000\u0000\u0098\u0099"+
		"\u0005p\u0000\u0000\u0099\u001c\u0001\u0000\u0000\u0000\u009a\u009b\u0005"+
		"p\u0000\u0000\u009b\u009c\u0005a\u0000\u0000\u009c\u009d\u0005i\u0000"+
		"\u0000\u009d\u009e\u0005r\u0000\u0000\u009e\u009f\u0005m\u0000\u0000\u009f"+
		"\u00a0\u0005a\u0000\u0000\u00a0\u00a1\u0005p\u0000\u0000\u00a1\u001e\u0001"+
		"\u0000\u0000\u0000\u00a2\u00a3\u0005r\u0000\u0000\u00a3\u00a4\u0005e\u0000"+
		"\u0000\u00a4\u00a5\u0005t\u0000\u0000\u00a5\u00a6\u0005u\u0000\u0000\u00a6"+
		"\u00a7\u0005r\u0000\u0000\u00a7\u00a8\u0005n\u0000\u0000\u00a8 \u0001"+
		"\u0000\u0000\u0000\u00a9\u00aa\u0005s\u0000\u0000\u00aa\u00ab\u0005y\u0000"+
		"\u0000\u00ab\u00ac\u0005n\u0000\u0000\u00ac\u00ad\u0005t\u0000\u0000\u00ad"+
		"\u00ae\u0005a\u0000\u0000\u00ae\u00af\u0005x\u0000\u0000\u00af\"\u0001"+
		"\u0000\u0000\u0000\u00b0\u00b1\u0005w\u0000\u0000\u00b1\u00b2\u0005h\u0000"+
		"\u0000\u00b2\u00b3\u0005i\u0000\u0000\u00b3\u00b4\u0005l\u0000\u0000\u00b4"+
		"\u00b5\u0005e\u0000\u0000\u00b5$\u0001\u0000\u0000\u0000\u00b6\u00b7\u0005"+
		"w\u0000\u0000\u00b7\u00b8\u0005i\u0000\u0000\u00b8\u00b9\u0005t\u0000"+
		"\u0000\u00b9\u00ba\u0005h\u0000\u0000\u00ba&\u0001\u0000\u0000\u0000\u00bb"+
		"\u00be\u0003\u0019\f\u0000\u00bc\u00be\u0003!\u0010\u0000\u00bd\u00bb"+
		"\u0001\u0000\u0000\u0000\u00bd\u00bc\u0001\u0000\u0000\u0000\u00be(\u0001"+
		"\u0000\u0000\u0000\u00bf\u00c0\u0005?\u0000\u0000\u00c0*\u0001\u0000\u0000"+
		"\u0000\u00c1\u00c2\u0005*\u0000\u0000\u00c2,\u0001\u0000\u0000\u0000\u00c3"+
		"\u00c4\u0005+\u0000\u0000\u00c4.\u0001\u0000\u0000\u0000\u00c5\u00c6\u0005"+
		"-\u0000\u0000\u00c60\u0001\u0000\u0000\u0000\u00c7\u00c8\u0005=\u0000"+
		"\u0000\u00c82\u0001\u0000\u0000\u0000\u00c9\u00ca\u0005.\u0000\u0000\u00ca"+
		"4\u0001\u0000\u0000\u0000\u00cb\u00cc\u0005)\u0000\u0000\u00cc6\u0001"+
		"\u0000\u0000\u0000\u00cd\u00ce\u0005(\u0000\u0000\u00ce8\u0001\u0000\u0000"+
		"\u0000\u00cf\u00d0\u0005}\u0000\u0000\u00d0:\u0001\u0000\u0000\u0000\u00d1"+
		"\u00d2\u0005{\u0000\u0000\u00d2<\u0001\u0000\u0000\u0000\u00d3\u00d4\u0005"+
		"]\u0000\u0000\u00d4>\u0001\u0000\u0000\u0000\u00d5\u00d6\u0005[\u0000"+
		"\u0000\u00d6@\u0001\u0000\u0000\u0000\u00d7\u00d8\u0005|\u0000\u0000\u00d8"+
		"B\u0001\u0000\u0000\u0000\u00d9\u00da\u0005>\u0000\u0000\u00daD\u0001"+
		"\u0000\u0000\u0000\u00db\u00dc\u0005<\u0000\u0000\u00dcF\u0001\u0000\u0000"+
		"\u0000\u00dd\u00de\u0005^\u0000\u0000\u00deH\u0001\u0000\u0000\u0000\u00df"+
		"\u00e0\u0005:\u0000\u0000\u00e0\u00e1\u0005:\u0000\u0000\u00e1J\u0001"+
		"\u0000\u0000\u0000\u00e2\u00e3\u0005:\u0000\u0000\u00e3L\u0001\u0000\u0000"+
		"\u0000\u00e4\u00e5\u0005;\u0000\u0000\u00e5N\u0001\u0000\u0000\u0000\u00e6"+
		"\u00e7\u0005,\u0000\u0000\u00e7P\u0001\u0000\u0000\u0000\u00e8\u00e9\u0005"+
		"-\u0000\u0000\u00e9\u00ea\u0005>\u0000\u0000\u00eaR\u0001\u0000\u0000"+
		"\u0000\u00eb\u00ec\u0005_\u0000\u0000\u00ecT\u0001\u0000\u0000\u0000\u00ed"+
		"\u00f2\u0007\u0001\u0000\u0000\u00ee\u00f1\u0007\u0002\u0000\u0000\u00ef"+
		"\u00f1\u0003S)\u0000\u00f0\u00ee\u0001\u0000\u0000\u0000\u00f0\u00ef\u0001"+
		"\u0000\u0000\u0000\u00f1\u00f4\u0001\u0000\u0000\u0000\u00f2\u00f0\u0001"+
		"\u0000\u0000\u0000\u00f2\u00f3\u0001\u0000\u0000\u0000\u00f3\u00f5\u0001"+
		"\u0000\u0000\u0000\u00f4\u00f2\u0001\u0000\u0000\u0000\u00f5\u00f6\u0006"+
		"*\u0002\u0000\u00f6V\u0001\u0000\u0000\u0000\u0006\u0000`l\u00bd\u00f0"+
		"\u00f2\u0003\u0006\u0000\u0000\u0001\f\u0000\u0001*\u0001";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}